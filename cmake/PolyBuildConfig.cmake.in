# cmake/PolyBuildConfig.cmake.in
# PolyBuild CMake Configuration File for External Consumption
# Generated by CMake during build process

@PACKAGE_INIT@

include(CMakeFindDependencyMacro)

# Systematic dependency resolution for external consumers
find_dependency(OpenSSL)

# PolyBuild library targets for systematic linking
if(NOT TARGET PolyBuild::polybuild_static)
    include("${CMAKE_CURRENT_LIST_DIR}/PolyBuildTargets.cmake")
endif()

# Systematic path configuration for library consumption
set(POLYBUILD_INCLUDE_DIRS "@PACKAGE_CMAKE_INSTALL_PREFIX@/include")
set(POLYBUILD_LIBRARY_DIRS "@PACKAGE_CMAKE_INSTALL_PREFIX@/lib")
set(POLYBUILD_SCHEMA_DIRS "@PACKAGE_CMAKE_INSTALL_PREFIX@/share/polybuild/schemas")

# Version information for systematic compatibility checking
set(POLYBUILD_VERSION "@PROJECT_VERSION@")
set(POLYBUILD_VERSION_MAJOR "@PROJECT_VERSION_MAJOR@")
set(POLYBUILD_VERSION_MINOR "@PROJECT_VERSION_MINOR@")
set(POLYBUILD_VERSION_PATCH "@PROJECT_VERSION_PATCH@")

# Feature availability for systematic integration planning
set(POLYBUILD_HAS_OPENSSL @OPENSSL_FOUND@)
set(POLYBUILD_HAS_IOC_CONFIG TRUE)
set(POLYBUILD_HAS_CRYPTO_MODULE TRUE)
set(POLYBUILD_HAS_CLI_INTERFACE TRUE)

# Systematic validation function for external consumers
function(validate_polybuild_integration)
    if(NOT TARGET PolyBuild::polybuild_static)
        message(FATAL_ERROR "PolyBuild static library target not available")
    endif()
    
    if(NOT EXISTS "${POLYBUILD_INCLUDE_DIRS}/polybuild/core/config_ioc.h")
        message(FATAL_ERROR "PolyBuild headers not properly installed")
    endif()
    
    message(STATUS "PolyBuild integration validated successfully")
    message(STATUS "  Version: ${POLYBUILD_VERSION}")
    message(STATUS "  Include Path: ${POLYBUILD_INCLUDE_DIRS}")
    message(STATUS "  Library Path: ${POLYBUILD_LIBRARY_DIRS}")
    message(STATUS "  OpenSSL Support: ${POLYBUILD_HAS_OPENSSL}")
endfunction()

check_required_components(PolyBuild)

# cmake/polybuild.pc.in  
# pkg-config Configuration for Traditional Library Consumption
prefix=@CMAKE_INSTALL_PREFIX@
exec_prefix=${prefix}
libdir=${exec_prefix}/lib
includedir=${prefix}/include

Name: PolyBuild
Description: Modular Build System for Polyglot Projects - Aegis Architecture
Version: @PROJECT_VERSION@
URL: https://github.com/obinexuscomputing/polybuild
Requires: @POLYBUILD_PC_REQUIRES@
Cflags: -I${includedir}
Libs: -L${libdir} -lpolybuild
Libs.private: @POLYBUILD_PC_LIBS_PRIVATE@

# cmake/test-performance.cmake
# Performance Validation Script for IOC Configuration System
cmake_minimum_required(VERSION 3.16)

message(STATUS "Executing PolyBuild performance validation")

# Performance benchmarking configuration
set(PERFORMANCE_ITERATIONS 100)
set(PERFORMANCE_TIMEOUT 30)

# Measure configuration access performance
math(EXPR start_time "${CMAKE_SCRIPT_MODE_FILE}")
foreach(iteration RANGE 1 ${PERFORMANCE_ITERATIONS})
    execute_process(
        COMMAND ${CMAKE_BINARY_DIR}/bin/polybuild config show --module crypto
        OUTPUT_QUIET
        ERROR_QUIET
        TIMEOUT ${PERFORMANCE_TIMEOUT}
        RESULT_VARIABLE iteration_result
    )
    
    if(NOT iteration_result EQUAL 0)
        message(FATAL_ERROR "Performance test failed at iteration ${iteration}")
    endif()
endforeach()

math(EXPR end_time "${CMAKE_SCRIPT_MODE_FILE}")
math(EXPR total_time "${end_time} - ${start_time}")
math(EXPR avg_time "${total_time} / ${PERFORMANCE_ITERATIONS}")

message(STATUS "Performance validation completed:")
message(STATUS "  Total iterations: ${PERFORMANCE_ITERATIONS}")
message(STATUS "  Average response time: ${avg_time}ms")
message(STATUS "  Performance target: <50ms per operation")

if(avg_time GREATER 50)
    message(WARNING "Performance below target - optimization recommended")
else()
    message(STATUS "? Performance validation successful")
endif()

# cmake/cmake_uninstall.cmake.in
# Systematic Uninstall Script for Clean Environment Management
if(NOT EXISTS "@CMAKE_CURRENT_BINARY_DIR@/install_manifest.txt")
    message(FATAL_ERROR "Cannot find install manifest: @CMAKE_CURRENT_BINARY_DIR@/install_manifest.txt")
endif()

file(READ "@CMAKE_CURRENT_BINARY_DIR@/install_manifest.txt" files)
string(REGEX REPLACE "\n" ";" files "${files}")

foreach(file ${files})
    message(STATUS "Uninstalling $ENV{DESTDIR}${file}")
    if(IS_SYMLINK "$ENV{DESTDIR}${file}" OR EXISTS "$ENV{DESTDIR}${file}")
        exec_program(
            "@CMAKE_COMMAND@" ARGS "-E remove \"$ENV{DESTDIR}${file}\""
            OUTPUT_VARIABLE rm_out
            RETURN_VALUE rm_retval
        )
        if(NOT "${rm_retval}" STREQUAL 0)
            message(FATAL_ERROR "Problem when removing $ENV{DESTDIR}${file}")
        endif()
    else()
        message(STATUS "File $ENV{DESTDIR}${file} does not exist.")
    endif()
endforeach()

message(STATUS "PolyBuild uninstallation completed")
